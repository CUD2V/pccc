// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ccc_mat_rcpp
Rcpp::DataFrame ccc_mat_rcpp(Rcpp::CharacterMatrix& dx, Rcpp::CharacterMatrix& pc, int version);
RcppExport SEXP _pccc_ccc_mat_rcpp(SEXP dxSEXP, SEXP pcSEXP, SEXP versionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix& >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< int >::type version(versionSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc_mat_rcpp(dx, pc, version));
    return rcpp_result_gen;
END_RCPP
}
// get_codes
Rcpp::List get_codes(int icdv);
RcppExport SEXP _pccc_get_codes(SEXP icdvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type icdv(icdvSEXP);
    rcpp_result_gen = Rcpp::wrap(get_codes(icdv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pccc_ccc_mat_rcpp", (DL_FUNC) &_pccc_ccc_mat_rcpp, 3},
    {"_pccc_get_codes", (DL_FUNC) &_pccc_get_codes, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_pccc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
